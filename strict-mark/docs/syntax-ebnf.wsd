@startebnf
title Strict Markdown syntax definition by EBNF (ISO/IEC 14977) - render using PlantUML
  
markdown      = block, {{newLine}-, block};
block         = heading | quote | code | paragraph | list | horizontal | other;
 
(* Heading *)
heading       = {heading1 | heading2 | heading3 | heading4 | heading5 | heading6}-, newLine ;
heading1      = "#", {( space | tab ), text}-, [ (space | tab), {"#"}] | { text, [ space | tab ] }-, newLine, "=", {"="};
heading2      = "##", {( space | tab ), text}-, [ (space | tab), {"#"}] | { text, [ space | tab ] }-, newLine, "-", {"-"} ;
heading3      = "###", {( space | tab ), text}-, [ (space | tab), {"#"}] ;
heading4      = "####", {( space | tab ), text}-, [ (space | tab), {"#"}] ;
heading5      = "#####", {( space | tab ), text}-, [ (space | tab), {"#"}] ;
heading6      = "######", {( space | tab ), text}-, [ (space | tab), {"#"}] ;
 
(* Normal blocks *)
quote         = {quoteLine, newLine}-;
quoteLine     = ">", [ { space | tab }-, [paragraphText]];

code          = codeByMarker | codeByIndent;
codeByMarker  = codeMarker, {space}, [text, {space}], newLine, {unparseable}, newLine, codeMarker, {space}, newLine;
codeMarker    = ("~", "~", "~" | "`", "`", "`");

codeByIndent  = (indentSpaces | space, [space]), {unparseable}-, newLine, {codeByIndent};
 
list          = unorderedList | orderedList;
unorderedList = {asteriskTypeItem, newLine}- | {bulletTypeItem, newLine}-;

asteriskTypeItem = "*", listItem;
bulletTypeItem = "-", listItem;

orderedList = {numberTypeItem, newLine}-  | {iiiTypeItem, newLine}- | {abcTypeItem, newLine}- | {ABCTypeItem, newLine}-;

numberTypeItem = digit, [digit], ("." | ")"), listItem;
iiiTypeItem = ("i" | "v" | "x"), {("i" | "v" | "x")}, ("." | ")"), listItem;
abcTypeItem = lowerCase,("." | ")"), listItem;
ABCTypeItem = upperCase,("." | ")"), listItem;

listItem = {space | tab}-, paragraphText, {newLine, indentSpaces, (paragraphText | list | code | quoteLine)};

indentSpaces   = indentSpace1 | indentSpace2 | indentSpace3;
indentSpace1   = space, space, space, [space] | tab;
indentSpace2   = indentSpace1, (space, space, space, [space] | tab);
indentSpace3   = indentSpace2, (space, space, space, [space] | tab);

horizontal    = ("-", "-", {"-"} | "_", "_", {"_"} | "=", "=", {"="}), newLine;

(* paragraph and inline text *) 

other = { unparseable }, newLine ;

paragraph     = paragraphText, {newLine, paragraphText}, newLine ;

paragraphText = { (text | bold | italic | inlineCode | underline | link), {space | tab} }-;

bold          = "*", "*", {(text | italic | link | inlineCode | underline), {space | tab} }-, "*", "*";
italic        = "*", {(text | link | inlineCode | underline), {space | tab} }-, "*";
underline     =  "_", "_", {(text | inlineCode), {space | tab}}-, "_", "_" ;
inlineCode    = "`", {text | space | tab | "*" }-, "`" ;

link          = "[", { text |  space | tab }, "]", "(", url, ")" ;
image          = "!", ["[", { text |  space | tab }, "]"], "(", url, ")" ;

unparseable    = {(text | specialCharacter | controlCharacter), {space | tab}}-;

(* characters *) 
text          = letter | digit | other;
newLine       = ["\r"], "\n";
 
lowerCase     = "a" | "b" | "c" | "..." | "z";
upperCase     = "A" | "B" | "C" | "..." | "Z";
letter        = lowerCase | upperCase;
digit         = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
other         = "'" | '"' | "," | "." | "?" | "!" | ":" | ";" | "#" | "&" | "<" | "/" | "=" | "_" | "@" | "-" | ">" | "+" | "~";
specialCharacter = "*" | "`";
controlCharacter = "\0" | "\\";

space         = "\s";
tab           = "\t";

url           = letter, {letter | digit | "." | "?" | "!" | ":" | "-" | "_" | "/" | "+" } ;

@endebnf
