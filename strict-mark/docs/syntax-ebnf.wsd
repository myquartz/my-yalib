@startebnf
title Strict Markdown syntax definition by EBNF (ISO/IEC 14977) - render using PlantUML
  
markdown      = block, {{newLine}-, block};
block         = heading | quote | code | paragraph | list | horizontal | other;
 
(* Heading *)
heading       = {heading1 | heading2 | heading3 | heading4 | heading5 | heading6}-, newLine ;
heading1      = "#", {{ space | tab }-, text}-, [ {space | tab}-, {"#"}] | { text, [ space | tab ] }-, newLine, "=", {"="};
heading2      = "##", {{ space | tab }-, text}-, [ {space | tab}-, {"#"}] | { text, [ space | tab ] }-, newLine, "-", {"-"} ;
heading3      = "###", {( space | tab ), text}-, [ (space | tab), {"#"}] ;
heading4      = "####", {( space | tab ), text}-, [ (space | tab), {"#"}] ;
heading5      = "#####", {( space | tab ), text}-, [ (space | tab), {"#"}] ;
heading6      = "######", {( space | tab ), text}-, [ (space | tab), {"#"}] ;
 
(* Normal blocks *)
quote         = {quoteLine, newLine}-;
quoteLine     = ">", [ { space | tab }-, [textLine | unparseable]];

code          = codeByMarker | codeByIndent;
codeByMarker  = codeMarker, {space}, [text, {space}], newLine, {unparseable}, newLine, codeMarker, {space}, newLine;
codeMarker    = ("~", "~", "~" | "`", "`", "`");

codeByIndent  = (tab | space), {unparseable}, newLine, {codeByIndent};

paragraph     = textLine, {[controlCharacter], newLine, textLine}, newLine ;

 (* List blocks *)
list          = unorderedList | orderedList;
unorderedList = {asteriskTypeItem, newLine}- | {hyphenTypeItem, newLine}- | {plusTypeItem, newLine}-;

asteriskTypeItem = "*", uListItem;
hyphenTypeItem = "-", uListItem;
plusTypeItem = "+", uListItem;

uListItem = {space | tab}-, textLine, {newLine, [newLine], indent2Spaces, (textLine | codeByIndent | quoteLine | list )};

orderedList = {numberTypeItem, newLine}-  | {iiiTypeItem, newLine}- | {abcTypeItem, newLine}- | {ABCTypeItem, newLine}-;

numberTypeItem = digit, [digit], ("." | ")"), oListItem;
iiiTypeItem = ("i" | "v" | "x"), {("i" | "v" | "x")}, ("." | ")"), oListItem;
abcTypeItem = lowerCase,("." | ")"), oListItem;
ABCTypeItem = upperCase,("." | ")"), oListItem;

oListItem = {space | tab}-, textLine, {newLine, [newLine], indent3Spaces, (textLine | codeByIndent | quoteLine | list )};

(* Other blocks *)

indent2Spaces   = space, space, [space] | tab;

indent3Spaces   = space, space, space, [space] | tab;

horizontal    = ("-", "-", {"-"}- | "_", "_", {"_"}- | "=", "=", {"="}-), newLine;

other = { unparseable }, newLine ;

(* inline text *) 

textLine = { (text | strikethrough | bold | italic | inlineCode | underline | link), {space | tab } }-;

strikethrough = "~", "~", {(text | bold | italic | link | inlineCode | underline), {space | tab} }-, "~", "~";
bold          = "*", "*", {(text | italic | link | inlineCode | underline), {space | tab} }-, "*", "*";
italic        = "*", {(text | link | inlineCode | underline), {space | tab} }-, "*";
underline     =  "_", "_", {(text | inlineCode), {space | tab}}-, "_", "_" ;
inlineCode    = "`", {text | space | tab | "*" }-, "`" ;

link          = "[", { text |  space | tab }, "]", "(", url, ")" ;
image          = "!", ["[", { text |  space | tab }, "]"], "(", url, ")" ;

unparseable    = {(text | specialCharacter | controlCharacter), {space | tab}}-;

(* characters *) 
text          = letter | digit | other;
newLine       = ["\r"], "\n";
 
lowerCase     = "a" | "b" | "c" | "..." | "z";
upperCase     = "A" | "B" | "C" | "..." | "Z";
letter        = lowerCase | upperCase;
digit         = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
other         = "'" | '"' | "," | "." | "?" | "!" | ":" | ";" | "#" | "&" | "<" | "/" | "=" | "_" | "@" | "-" | ">" | "+" | "~";
specialCharacter = "*" | "`";
controlCharacter = "\0" | "\\";

space         = "\s";
tab           = "\t";

url           = letter, {letter | digit | "." | "?" | "!" | ":" | "-" | "_" | "/" | "+" } ;

@endebnf
