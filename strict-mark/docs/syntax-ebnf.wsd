@startebnf
title Strict Markdown definition by EBNF (ISO/IEC 14977) - render using PlantUML
 
 
markdown      = block, {{newLine}-, block};
block         = heading | quote | code | paragraph | list | link, newLine | image, newLine | horizontal, newLine | unparsable, newLine;
 
(* Heading *)
heading       = {heading1 | heading2 | heading3 | heading4 | heading5 | heading6}-, newLine ;
heading1      = "#", space, text, [space, {"#"}] | text, newLine, "=", {"="};
heading2      = "##", space, text, [space, {"#"}] | text, newLine, "=", {"-"} ;
heading3      = "###", space, text, [space, {"#"}] ;
heading4      = "####", space, text, [space, {"#"}] ;
heading5      = "#####", space, text, [space, {"#"}] ;
heading6      = "######", space, text, [space, {"#"}] ;
 
(* Normal blocks *)
quote         = quoteLine, newLine, {quoteLine, newLine};
quoteLine     = ">", space, {space}, paragraphText;

code          = codeByMarker | codeByIndent;
codeByMarker  = codeMarker, [space, {text}-], newLine, {unparsable}, newLine, codeMarker;
codeMarker    = ("~", "~", "~" | "`", "`", "`");

codeByIndent  = indentSpaces, {unparsable}-, newLine, {codeByIndent};

paragraph     = paragraphText, {newLine, paragraphText} ;
 
list          = unorderedList | orderedList ;
unorderedList = asteriskTypeItem, {asteriskTypeItem} | hyphenTypeItem, {hyphenTypeItem};
orderedList = numberTypeItem, {numberTypeItem}  | iiiTypeItem, {iiiTypeItem} | abcTypeItem, {abcTypeItem} | abcUpcaseTypeItem, {abcUpcaseTypeItem};

asteriskTypeItem = "*", listItem;
hyphenTypeItem = "-", listItem;

numberTypeItem = digit, [digit], ("." | ")"), listItem;
iiiTypeItem = ("i" | "v" | "x"), {("i" | "v" | "x")}, ("." | ")"), listItem;
abcTypeItem = lowerCase,("." | ")"), listItem;
abcUpcaseTypeItem = upperCase,("." | ")"), listItem;

listItem = {space | tab}-, paragraphText, {newLine, indentSpaces, (paragraphText | list | code | quoteLine)};

(* control blocks *) 

indentSpaces   = indentSpace1 | indentSpace2 | indentSpace3;
indentSpace1   = space, space, space, [space] | tab;
indentSpace2   = indentSpace1, (space, space, space, [space] | tab);
indentSpace3   = indentSpace2, (space, space, space, [space] | tab);

horizontal    = ("-", "-", {"-"} | "=", "=", {"="});

(* inline text *) 
paragraphText = { {space | tab}, (text | bold | italic | inlineCode | underline | link), [space | tab] }-;

bold          = "*", "*", {{space | tab}, (text | italic | link | inlineCode | underline), [space | tab]}-, "*", "*";
italic        = "*", {{space | tab}, (text | link | inlineCode | underline), [space | tab]}-, "*";
underline     =  "_", "_", {{space | tab}, (text | inlineCode), [space | tab]}-, "_", "_" ;
inlineCode    = "`", {{space | tab}, text, [space | tab]}-, "`" ;

link          = "[", { text |  space | tab }, "]", "(", url, ")" ;
image          = "!", ["[", { text |  space | tab }, "]"], "(", url, ")" ;



unparsable    = {(text | specialCharacter | controlCharacter), [space | tab]}-;

(* characters *) 
text          = letter | digit | other;
newLine       = ["\r"], "\n";
 
letter        = "a" | "b" | "c" | "..." | "z" | "A" | "B" | "C" | "..." | "Z" ;
digit         = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
other         = "'" | '"' | "," | "." | "?" | "!" | ":" | ";" | "#" | "&" | "<" | "/" | "=" | "_" | "@" | "-" | ">" | "+" | "~";
specialCharacter = "*" | "`";
controlCharacter = "\0" | "\\";

space         = "\s";
tab           = "\t";

url           = letter, {letter | digit | "." | "?" | "!" | ":" | "-" | "_" | "/" | "+" | space} ;

@endebnf
